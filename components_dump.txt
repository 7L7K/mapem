

===== FILE: /Users/kingal/mapem/frontend/genealogy-frontend/src/components/DiffViewer.jsx =====

import React, { useState } from 'react';
import { compareTrees } from '../services/api';
import Loader from './ui/Loader';
import ErrorBox from './ui/ErrorBox';

const DiffViewer = () => {
  const [newId, setNewId] = useState('');
  const [existingId, setExistingId] = useState('');
  const [diffResult, setDiffResult] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const handleCompare = async () => {
    setError(null);
    setLoading(true);
    try {
      const res = await compareTrees(newId, existingId);
      setDiffResult(res.data);
      setLoading(false);
    } catch (err) {
      console.error(err);
      setError("Failed to compare trees");
      setLoading(false);
    }
  };

  return (
    <div>
      <h2>Diff Viewer</h2>
      <div style={{ display: 'flex', gap: '1rem', marginBottom: '1rem' }}>
        <input
          type="text"
          placeholder="New Tree ID"
          value={newId}
          onChange={(e) => setNewId(e.target.value)}
        />
        <input
          type="text"
          placeholder="Existing Tree ID"
          value={existingId}
          onChange={(e) => setExistingId(e.target.value)}
        />
        <button onClick={handleCompare}>Compare Trees</button>
      </div>
      {loading && <Loader />}
      {error && <ErrorBox message={error} />}
      {diffResult && (
        <pre>{JSON.stringify(diffResult, null, 2)}</pre>
      )}
    </div>
  );
};

export default DiffViewer;


===== FILE: /Users/kingal/mapem/frontend/genealogy-frontend/src/components/UploadPanel.jsx =====

// src/components/UploadPanel.jsx
import React, { useState } from 'react';
import { uploadTree } from '../services/api';

const UploadPanel = () => {
  const [file, setFile] = useState(null);
  const [uploadStatus, setUploadStatus] = useState('');
  const [response, setResponse] = useState(null);

  const handleFileChange = (e) => {
    setFile(e.target.files[0]);
  };

  const handleUpload = async () => {
    if (!file) {
      setUploadStatus('Please select a file first.');
      return;
    }
    setUploadStatus('Uploading...');
    try {
      const res = await uploadTree(file);
      setResponse(res.data);
      setUploadStatus('Upload successful!');
    } catch (err) {
      setUploadStatus(`Upload failed: ${err.message}`);
      console.error(err);
    }
  };

  return (
    <div className="panel">
      <h2>Upload GEDCOM File</h2>
      <input type="file" onChange={handleFileChange} accept=".ged,.gedcom" />
      <button onClick={handleUpload}>Upload</button>
      {uploadStatus && <p>{uploadStatus}</p>}
      {response && (
        <div className="response-box">
          <h3>Response:</h3>
          <pre>{JSON.stringify(response, null, 2)}</pre>
        </div>
      )}
    </div>
  );
};

export default UploadPanel;


===== FILE: /Users/kingal/mapem/frontend/genealogy-frontend/src/components/list_files_to_txt.py =====

import os

# Target folder
folder_path = "/Users/kingal/mapem/frontend/genealogy-frontend/src/components"
output_file = "components_dump.txt"

with open(output_file, "w", encoding="utf-8") as out:
    for root, _, files in os.walk(folder_path):
        for filename in files:
            file_path = os.path.join(root, filename)
            try:
                with open(file_path, "r", encoding="utf-8") as f:
                    out.write(f"\n\n===== FILE: {file_path} =====\n\n")
                    out.write(f.read())
            except Exception as e:
                out.write(f"\n\n===== ERROR READING: {file_path} =====\n{e}\n")

print(f"📝 All contents dumped to: {output_file}")


===== FILE: /Users/kingal/mapem/frontend/genealogy-frontend/src/components/PeopleViewer.jsx =====

import React, { useEffect, useState } from 'react';
import { getPeople } from '../services/api';
import Loader from './ui/Loader';
import ErrorBox from './ui/ErrorBox';

const PeopleViewer = () => {
  const [people, setPeople] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    getPeople()
      .then(data => {
        console.log("Fetched people:", data);  // Debug log
        setPeople(Array.isArray(data) ? data : []);
        setLoading(false);
      })
      .catch(err => {
        console.error("Error fetching people:", err);
        setError("Failed to load people.");
        setLoading(false);
      });
  }, []);

  if (loading) return <Loader />;
  if (error) return <ErrorBox message={error} />;

  return (
    <div style={{ padding: '1rem' }}>
      <h2>People in Tree</h2>
      {people.length === 0 ? (
        <p>No people found.</p>
      ) : (
        <ul>
          {people.map(person => (
            <li key={person.id}>
              {person.name || 'Unnamed'} – {person.occupation || 'No occupation'}
            </li>
          ))}
        </ul>
      )}
    </div>
  );
};

export default PeopleViewer;


===== FILE: /Users/kingal/mapem/frontend/genealogy-frontend/src/components/TreeViewer.jsx =====

import React, { useEffect, useState } from 'react';
import cytoscape from 'cytoscape';
import dagre from 'cytoscape-dagre';
import { getTree } from '../services/api';
import Loader from './ui/Loader';
import ErrorBox from './ui/ErrorBox';

cytoscape.use(dagre);

const TreeViewer = ({ treeId = 1 }) => {
  const [elements, setElements] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    getTree(treeId)
      .then(res => {
        setElements(res.data);
        setLoading(false);
      })
      .catch(err => {
        console.error("Error loading tree data:", err);
        setError("Failed to load tree.");
        setLoading(false);
      });
  }, [treeId]);

  useEffect(() => {
    if (loading || error || !elements.length) return;

    const cy = cytoscape({
      container: document.getElementById('cy'),
      elements,
      layout: { name: 'dagre' },
      style: [
        {
          selector: 'node',
          style: {
            'label': 'data(label)',
            'background-color': '#222',
            'color': '#fff',
            'text-valign': 'center',
            'text-halign': 'center',
            'font-size': '12px'
          }
        },
        {
          selector: 'edge',
          style: {
            'width': 2,
            'line-color': '#ccc',
            'target-arrow-color': '#ccc',
            'target-arrow-shape': 'triangle'
          }
        }
      ]
    });

    return () => cy.destroy();
  }, [elements, loading, error]);

  if (loading) return <Loader />;
  if (error) return <ErrorBox message={error} />;

  return (
    <div>
      <h2>Family Tree Viewer</h2>
      <div id="cy" style={{ width: '100%', height: '600px' }}></div>
    </div>
  );
};

export default TreeViewer;


===== FILE: /Users/kingal/mapem/frontend/genealogy-frontend/src/components/MigrationMap.jsx =====

// components/MigrationMap.jsx
import React from 'react';
import { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';
import 'leaflet/dist/leaflet.css';

const MigrationMap = ({ movements }) => {
  const displayMovements = movements.length > 0
    ? movements
    : [
        { name: 'John', lat: 40.7128, lng: -74.0060, year: 1910 },
        { name: 'Mary', lat: 34.0522, lng: -118.2437, year: 1930 }
      ];

  return (
    <MapContainer
      center={[39.8283, -98.5795]}
      zoom={4}
      scrollWheelZoom={false}
      style={{ height: '600px', width: '100%' }}
      key={JSON.stringify(displayMovements)} // ensures unmount on data change
    >
      <TileLayer
        attribution='&copy; OpenStreetMap contributors'
        url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
      />
      {displayMovements.map((move, index) => {
        const { lat, lng, name, year } = move;
        if (!lat || !lng) return null;
        return (
          <Marker key={index} position={[lat, lng]}>
            <Popup>
              <strong>{name || 'Unknown'}</strong><br />
              {year ? `Year: ${year}` : 'No year provided'}
            </Popup>
          </Marker>
        );
      })}
    </MapContainer>
  );
};

export default MigrationMap;


===== FILE: /Users/kingal/mapem/frontend/genealogy-frontend/src/components/SearchPanel.jsx =====

// src/components/SearchPanel.jsx
import React, { useState } from 'react';

const SearchPanel = ({ onSearch }) => {
  const [query, setQuery] = useState('');

  const handleSearch = () => {
    if (onSearch) onSearch(query);
  };

  return (
    <div>
      <h2>Search Panel</h2>
      <input
        type="text"
        value={query}
        onChange={(e) => setQuery(e.target.value)}
        placeholder="Search names, locations, etc..."
      />
      <button onClick={handleSearch}>Search</button>
    </div>
  );
};

export default SearchPanel;


===== FILE: /Users/kingal/mapem/frontend/genealogy-frontend/src/components/MapView.jsx =====

import React, { useEffect, useState } from 'react';
import { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';
import { getMovements } from '../services/api';
import Loader from './ui/Loader';
import 'leaflet/dist/leaflet.css';

const MapView = ({ treeId = 1 }) => {
  const [loading, setLoading] = useState(true);
  const [movements, setMovements] = useState([]);
  const [error, setError] = useState(null);
  const [mapReady, setMapReady] = useState(false);

  useEffect(() => {
    console.log('🌀 treeId changed:', treeId);
    setLoading(true);
    setMapReady(false);

    getMovements(treeId)
      .then(res => {
        console.log("✅ Movements loaded:", res.data);
        setMovements(Array.isArray(res.data) ? res.data : []);
        setLoading(false);
        setTimeout(() => {
          console.log("🎯 Map ready to mount");
          setMapReady(true);
        }, 10);
      })
      .catch(err => {
        console.error("❌ Migration data error:", err);
        setError("Migration data unavailable.");
        setLoading(false);
      });
  }, [treeId]);

  if (loading) return <Loader />;
  if (error) return <div>{error}</div>;

  return (
    <div>
      <h2>🗺️ Migration Map</h2>
      {mapReady ? (
        <MapContainer
          key={`map-${treeId}`}
          center={[39.8283, -98.5795]}
          zoom={4}
          scrollWheelZoom={true}
          style={{ height: '600px', width: '100%' }}
        >
          <TileLayer
            attribution='&copy; OpenStreetMap contributors'
            url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
          />
          {movements.map((move, idx) => {
            const { lat, lng, name, year } = move;
            if (lat == null || lng == null) {
              console.warn("⛔ Missing lat/lng:", move);
              return null;
            }
            return (
              <Marker key={idx} position={[lat, lng]}>
                <Popup>
                  <strong>{name || 'Unknown'}</strong><br />
                  {year ? `Year: ${year}` : 'No year'}
                </Popup>
              </Marker>
            );
          })}
        </MapContainer>
      ) : (
        <div style={{ height: '600px' }}>🧩 Preparing map…</div>
      )}
    </div>
  );
};

export default MapView;


===== FILE: /Users/kingal/mapem/frontend/genealogy-frontend/src/components/Timeline.jsx =====

import React, { useEffect, useState } from 'react';
import axios from 'axios';

const Timeline = () => {
  const [timelineData, setTimelineData] = useState([]);
  const [error, setError] = useState("");

  useEffect(() => {
    axios.get("http://localhost:5050/api/timeline/1")
      .then(res => setTimelineData(res.data))
      .catch(err => {
        setError("Failed to load timeline");
        console.error("❌ Timeline fetch error:", err);
      });
  }, []);

  return (
    <div>
      <h2>Timeline</h2>
      {error && <p style={{ color: "red" }}>{error}</p>}
      <ul>
        {timelineData.map((item, i) => (
          <li key={i}>
            <strong>{item.year}</strong> - {item.event}
          </li>
        ))}
      </ul>
    </div>
  );
};

export default Timeline;


===== FILE: /Users/kingal/mapem/frontend/genealogy-frontend/src/components/Dashboard.jsx =====



// src/components/Dashboard.jsx
import React from 'react';

const Dashboard = () => {
  return (
    <div style={{ padding: '2rem' }}>
      <h2>Welcome to MapEm</h2>
      <p>Select a tree to view, or upload your own GEDCOM to begin mapping family movements.</p>
    </div>
  );
};

export default Dashboard;




===== FILE: /Users/kingal/mapem/frontend/genealogy-frontend/src/components/EventPanel.jsx =====

import React, { useEffect, useState } from 'react';
import axios from 'axios';

const EventPanel = () => {
  const [events, setEvents] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const treeId = 1; // Adjust this to dynamically select the tree if needed.

  useEffect(() => {
    axios.get(`${import.meta.env.VITE_API_BASE_URL || 'http://localhost:5050'}/api/events`, {
      params: { tree_id: treeId }
    })
      .then(res => {
        setEvents(res.data);
        setLoading(false);
      })
      .catch(err => {
        console.error("Error fetching events:", err);
        setError("Failed to load events.");
        setLoading(false);
      });
  }, [treeId]);

  if (loading) return <div>Loading events...</div>;
  if (error) return <div>{error}</div>;

  return (
    <div>
      <h2>Events</h2>
      {events.length === 0 ? (
        <div>No events found.</div>
      ) : (
        <table border="1" cellPadding="8">
          <thead>
            <tr>
              <th>ID</th>
              <th>Type</th>
              <th>Date</th>
              <th>Date Precision</th>
              <th>Category</th>
              <th>Source Tag</th>
              <th>Individual</th>
              <th>Location</th>
            </tr>
          </thead>
          <tbody>
            {events.map(evt => (
              <tr key={evt.id}>
                <td>{evt.id}</td>
                <td>{evt.event_type}</td>
                <td>{evt.date || 'N/A'}</td>
                <td>{evt.date_precision}</td>
                <td>{evt.category}</td>
                <td>{evt.source_tag}</td>
                <td>{evt.individual ? evt.individual.name : 'N/A'}</td>
                <td>
                  {evt.location
                    ? `${evt.location.normalized_name} (${evt.location.latitude}, ${evt.location.longitude}) - Conf: ${evt.location.confidence}`
                    : 'N/A'}
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      )}
    </div>
  );
};

export default EventPanel;


===== FILE: /Users/kingal/mapem/frontend/genealogy-frontend/src/components/SchemaViewer.jsx =====

// src/components/SchemaViewer.jsx
import React, { useEffect, useState } from 'react';
import axios from 'axios';

const API_BASE_URL = import.meta.env.VITE_API_BASE_URL || 'http://localhost:5050';

function SchemaViewer() {
  const [schema, setSchema] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    console.log("📡 Fetching DB schema from:", `${API_BASE_URL}/api/schema`);
    axios.get(`${API_BASE_URL}/api/schema`)
      .then((res) => {
        setSchema(res.data);
        console.log("✅ Schema fetched:", res.data);
        setLoading(false);
      })
      .catch((err) => {
        console.error("❌ Error fetching schema:", err);
        setError("Failed to fetch schema.");
        setLoading(false);
      });
  }, []);

  if (loading) return <div>🌀 Loading schema...</div>;
  if (error) return <div style={{ color: 'red', padding: '1rem' }}>{error}</div>;

  return (
    <div style={{ padding: '1rem' }}>
      <h2>🧬 Database Schema</h2>
      {schema && Object.keys(schema).map((table) => (
        <div key={table} style={{ marginBottom: '1rem', border: '1px solid #ccc', padding: '0.5rem' }}>
          <h3>{table}</h3>
          <table style={{ width: '100%', borderCollapse: 'collapse' }}>
            <thead>
              <tr>
                <th style={cellStyle}>Name</th>
                <th style={cellStyle}>Type</th>
                <th style={cellStyle}>Nullable</th>
                <th style={cellStyle}>Default</th>
              </tr>
            </thead>
            <tbody>
              {Array.isArray(schema[table]) && schema[table].map((col) => (
                <tr key={col.name}>
                  <td style={cellStyle}>{col.name}</td>
                  <td style={cellStyle}>{col.type}</td>
                  <td style={cellStyle}>{col.nullable ? "Yes" : "No"}</td>
                  <td style={cellStyle}>{col.default || ""}</td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      ))}
    </div>
  );
}

const cellStyle = {
  border: '1px solid #ccc',
  padding: '0.5rem',
  textAlign: 'left'
};

export default SchemaViewer;


===== FILE: /Users/kingal/mapem/frontend/genealogy-frontend/src/components/ui/Loader.jsx =====

// src/components/ui/Loader.jsx
import React from 'react';

const Loader = () => <div className="loader">Loading...</div>;

export default Loader;


===== FILE: /Users/kingal/mapem/frontend/genealogy-frontend/src/components/ui/ErrorBox.jsx =====

// src/components/ui/ErrorBox.jsx
import React from 'react';

const ErrorBox = ({ message }) => (
  <div className="error-box">
    <p>{message}</p>
  </div>
);

export default ErrorBox;
